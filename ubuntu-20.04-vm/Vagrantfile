# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"
  config.vm.boot_timeout = 600
  # config.ssh.timeout = 300

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access

  # Java build Installation
  config.vm.network "forwarded_port", guest: 3232, host: 3232, host_ip: "127.0.0.1" # (Playground)
  config.vm.network "forwarded_port", guest: 3233, host: 3233, host_ip: "127.0.0.1" # (Controller)
  config.vm.network "forwarded_port", guest: 6379, host: 6379, host_ip: "127.0.0.1" # (whisk-redis)
  config.vm.network "forwarded_port", guest: 9000, host: 9000, host_ip: "127.0.0.1" # (whisk-apigw, Api Gateway - Api Service)
  config.vm.network "forwarded_port", guest: 3234, host: 3234, host_ip: "127.0.0.1" # (whisk-apigw, Api Gateway - Management Service)
  config.vm.network "forwarded_port", guest: 5984, host: 3234, host_ip: "127.0.0.1" # (whisk-couch, Username: [whisk_admin], Password: [some_passw0rd])
  config.vm.network "forwarded_port", guest: 9092, host: 9092, host_ip: "127.0.0.1" # (kafka)
  config.vm.network "forwarded_port", guest: 39109, host: 39109, host_ip: "127.0.0.1" # (whisk-kafka-drop-ui) Is it random?

  # Docker Compose Installation
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 443, host: 8443, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 9090, host: 9090, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 6379, host: 6379, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 2181, host: 2181, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 5984, host: 5984, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 8085, host: 8085, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 9333, host: 9333, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 8888, host: 8888, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 9222, host: 9222, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 9092, host: 9092, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 8081, host: 8081, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "dit247", "/dit247"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.name = "DIT257-Ubuntu20.04VM"
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
    vb.cpus = 2
  end
  
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update && apt-get install -y \
    openjdk-8-jdk \
    nodejs \
    npm \
    git \
    curl \
    zip \
    docker.io \
    tar \
    lsof \
    && apt-get clean

    # Download docker compose
    sudo curl -L "https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
    && chmod +x /usr/local/bin/docker-compose

    # Download wsk cli
    sudo curl -L "https://github.com/apache/openwhisk-cli/releases/download/1.2.0/OpenWhisk_CLI-1.2.0-linux-amd64.tgz" -o OpenWhisk_CLI-1.2.0-linux-amd64.tgz
    sudo tar -xzf OpenWhisk_CLI-1.2.0-linux-amd64.tgz
    sudo chmod +x wsk
    sudo mv wsk /usr/local/bin/
    sudo rm OpenWhisk_CLI-1.2.0-linux-amd64.tgz
    sudo rm LICENSE.txt
    sudo rm NOTICE.txt
    
    # Verify installations
    java -version
    docker --version
    docker-compose --version
    wsk --help

    # Download openwhisk
    sudo git clone https://github.com/apache/openwhisk.git

    cd openwhisk

    # Build jar
    sudo ./gradlew --info :core:standalone:build

    # Configure wsk cli
    wsk property set --apihost http://127.0.0.1:3233
    wsk property set --auth `cat ansible/files/auth.guest`

    # Run openwhisk
    sudo java -Dwhisk.standalone.host.name=0.0.0.0 -Dwhisk.standalone.host.internal=0.0.0.0 -Dwhisk.standalone.host.external=0.0.0.0 -jar ./bin/openwhisk-standalone.jar --couchdb --kafka --api-gw --kafka-ui

  SHELL
end
